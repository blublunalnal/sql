{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/blublunalnal/sql/blob/main/Copy_of_Lan_Lan_project1_CS145_2025.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U5JUMgc_gbHp"
      },
      "source": [
        "# CS145: Project 1 | Identifying Future Trends in Technology"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EHDiv4GrhofN"
      },
      "source": [
        "## Author\n",
        "* *Lan Lan, lanlan0*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gMNQWFvSgepX"
      },
      "source": [
        "# Section 1: Project Overview"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lX1Jkglwg1SI"
      },
      "source": [
        "---\n",
        "\n",
        "*TODO: Explain your Top-3 questions you want to answer. Each question should require multi-table analysis. Questions should lead to actionable insights*\n",
        "\n",
        "---\n",
        "<br> <br>\n",
        "**Central Theme**: Identifying Future Trends in Technology <br>\n",
        "\n",
        "This project analyzes Stack Overflow data to identify emerging topics, declining topics, and knowledge gaps over the past 12 months. The goal is to understand which tech-related areas are gaining momentum and which are losing relevance. These insights can inform strategic business decisions such as investment priorities and talent acquisition strategies. As a secondary exploration, the project identifies subject matter experts in emerging topics to support hiring and collaboration decisions. <br>\n",
        "Note that the stackoverflow data has stopped updating since 09/25/2022. All time references are relative to this date. <br>\n",
        "\n",
        "**Question 1**: What topics are gaining and losing momentum in the lastest year? <br>\n",
        "This question identifies which technology topics are trending upward or downward based on recent activity patterns. <br>\n",
        "\n",
        "**Query 1.1**: Identifies tags (topics) that have become significantly more popular in the last 12 months compared to the previous 1-4 years <br>\n",
        "**Query 1.2**: Identifies tags that were previously popular but have declined in activity over the last 12 months. <br> <br>\n",
        "\n",
        "**Question 2**: Who are the experts in trending topics and what is their broader expertise? <br>\n",
        "\n",
        "This question identifies the top contributors in emerging technology areas to understand both their specialization and breadth of knowledge. Understanding their broader expertise might help reveal potential cross-pollination patterns (how one tech domain may be driving the emergence of new trends, etc). <br>\n",
        "\n",
        "**Query 2.1**: Identifies users with the highest answer volume and answer scores in trending tags from the past 12 months. <br>\n",
        "**Query 2.2**: Profiles these experts by finding their top 3 tags based on answer volume and scores across their entire Stack Overflow history <br><br>\n",
        "\n",
        "**Question 3**: What are the knowledge gaps in the lastest 12 month? <br>\n",
        "This question identifies areas where the community has unmet needs or struggles to provide quality answers. Knowledge gaps can reveal early signs or pain points that drive innovations.Knowledge gaps are defined by four patterns:<br>\n",
        "1. high views, low answer rate\n",
        "2. high question count, low answer rate\n",
        "3. high question count, high answer rate, low answer score and low acceptance rate\n",
        "4. low question count,  high view count, and low answer rate <br>\n",
        "(1) and (2) represent topics the community wants to understand but lacks sufficient knowledge about. (3) represents topics the community thought it understood well, but where existing knowledge proves inadequate or incomplete. (4) represents niche topics that attract interest when encountered but have been largely overlooked."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r_GvgTCcgv6N"
      },
      "source": [
        "# Section 2: Dataset Analysis"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Detailed Overview\n",
        "\n",
        "For this project, I used stackoverflow datasets (total size > 50GB). The rows of the tables I used for analysis include are as follows:\n",
        "- `bigquery-public-data.stackoverflow.users`: 18712212 rows; 1.12 GB\n",
        "- `bigquery-public-data.stackoverflow.posts_answers`: 34024119 rows; 10.22 GB\n",
        "- `bigquery-public-data.stackoverflow.posts_questions`: 23020127 rows; 12.46 GB\n",
        "\n"
      ],
      "metadata": {
        "id": "vqnK-W45I5lr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Table Relationships"
      ],
      "metadata": {
        "id": "DB6HqYiOI_Eu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "- `bigquery-public-data.stackoverflow.users`:\n",
        "   - primary key, foreign key: id\n",
        "   - \"id\" can be joined with the \"owner_user_id\" keys in `post_answers` and `post_questions`\n",
        "- `bigquery-public-data.stackoverflow.posts_answers`:\n",
        "  - primary key: id\n",
        "  - foreign key: parent_id, owner_user_id\n",
        "   - can be joined with `posts_questions` using \"parent_id\"\n",
        "- `bigquery-public-data.stackoverflow.posts_questions`:\n",
        "  - primary key: id\n",
        "  - foreign key: owner_user_id"
      ],
      "metadata": {
        "id": "QXsespn3JA2P"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Issues\n"
      ],
      "metadata": {
        "id": "B0Ocd4zkJC4_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "These three tables doesn't seem to have duplicates found (see query below). Upon further investigation, I did found some columns in the `user` tables are empty. For example, the \"age\" column. These empty columns didn't affect this project."
      ],
      "metadata": {
        "id": "B2hk1R0hwcRK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%bigquery --project $project_id\n",
        "\n",
        "SELECT\n",
        "  'users.id' as primary_key_column,\n",
        "  COUNT(*) as total_rows,\n",
        "  COUNT(DISTINCT id) as distinct_values,\n",
        "  COUNT(*) - COUNT(DISTINCT id) as duplicate_count,\n",
        "  COUNTIF(id IS NULL) as null_count,\n",
        "\n",
        "FROM `bigquery-public-data.stackoverflow.users`\n",
        "\n",
        "UNION ALL\n",
        "\n",
        "\n",
        "SELECT\n",
        "  'posts_answers.id',\n",
        "  COUNT(*),\n",
        "  COUNT(DISTINCT id),\n",
        "  COUNT(*) - COUNT(DISTINCT id),\n",
        "  COUNTIF(id IS NULL),\n",
        "\n",
        "FROM `bigquery-public-data.stackoverflow.posts_answers`\n",
        "\n",
        "UNION ALL\n",
        "\n",
        "\n",
        "SELECT\n",
        "  'posts_questions.id',\n",
        "  COUNT(*),\n",
        "  COUNT(DISTINCT id),\n",
        "  COUNT(*) - COUNT(DISTINCT id),\n",
        "  COUNTIF(id IS NULL),\n",
        "\n",
        "FROM `bigquery-public-data.stackoverflow.posts_questions`"
      ],
      "metadata": {
        "id": "yfzxiquqvFPY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fc_clta9g3H5"
      },
      "source": [
        "# Section 3: Get Your Feet Wet"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "Debug Tables for the following queries:\n",
        "* Subquery 1:  User who answer less than 10 questions\n",
        "* CTE 1: What are the earliest and latest complete record in this dataset?"
      ],
      "metadata": {
        "id": "pq259gbmJxTT"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iTYZZK-lhCV9"
      },
      "outputs": [],
      "source": [
        "# Run this cell to authenticate yourself to BigQuery\n",
        "from google.colab import auth\n",
        "auth.authenticate_user() # make sure to \"Select All\" when authenticating\n",
        "project_id = \"cs145-project-1-474501\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uIY7-6-thFc-"
      },
      "outputs": [],
      "source": [
        "# Initialize BiqQuery client\n",
        "from google.cloud import bigquery\n",
        "client = bigquery.Client(project=project_id)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Subqueries"
      ],
      "metadata": {
        "id": "UlJuqhMxJYY4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2 queries with scoped variables"
      ],
      "metadata": {
        "id": "6_A3w-iuJZMK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### SubQuery 1: User who answer less than 10 questions\n"
      ],
      "metadata": {
        "id": "t2QHCN0xJlXJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%bigquery --project $project_id\n",
        "SELECT user.display_name as user_name\n",
        "FROM `bigquery-public-data.stackoverflow.users` user\n",
        "WHERE (\n",
        "  SELECT COUNT(*)\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_answers` answers\n",
        "  WHERE answers.owner_user_id = user.id\n",
        ") < 10\n",
        "LIMIT 10;"
      ],
      "metadata": {
        "id": "qqGM3Sw_wHJ0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### SubQuery 2: Do question poster answer their own question?\n"
      ],
      "metadata": {
        "id": "pKtqsVuYKdt6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%bigquery --project $project_id\n",
        "\n",
        "SELECT\n",
        "  u.display_name as user_name,\n",
        "FROM `bigquery-public-data.stackoverflow.users` u\n",
        "WHERE EXISTS(\n",
        "  SELECT 1\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "    ON q.id = a.parent_id\n",
        "  WHERE q.owner_user_id = a.owner_user_id\n",
        "    AND q.owner_user_id IS NOT NULL\n",
        "    AND u.id = q.owner_user_id\n",
        ")\n",
        "LIMIT 10;"
      ],
      "metadata": {
        "id": "rRMxbo0k0ro7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## CTEs"
      ],
      "metadata": {
        "id": "p5RyG_5WJa7V"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2 queries with WITH clauses"
      ],
      "metadata": {
        "id": "AXBy4SjMJcs5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### CTE 1: What are the earliest and latest complete record in this dataset?\n"
      ],
      "metadata": {
        "id": "37FNty6MLEv4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# write code here\n",
        "%%bigquery --project $project_id\n",
        "WITH records AS (\n",
        "   SELECT\n",
        "  q.body AS question,\n",
        "  a.body AS answers,\n",
        "  q.creation_date AS question_date,\n",
        "  a.creation_date AS answer_date\n",
        "FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "  ON q.id = a.parent_id\n",
        "), get_early_latest AS (\n",
        "SELECT\n",
        "CASE\n",
        "  WHEN question_date < answer_date THEN question_date\n",
        "  ELSE answer_date\n",
        "END AS earliest_date,\n",
        "CASE\n",
        "  WHEN question_date > answer_date THEN question_date\n",
        "  ELSE answer_date\n",
        "END AS latest_date\n",
        "FROM records\n",
        "WHERE question_date IS NOT NULL AND answer_date IS NOT NULL)\n",
        "SELECT\n",
        "MAX(latest_date) AS latest_date,\n",
        "MIN(earliest_date) AS earliest_date\n",
        "FROM get_early_latest;"
      ],
      "metadata": {
        "id": "FWJKRfiQLEv5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### CTE 2: Users with top 10% of repuations who post the top 10% favorites questions\n"
      ],
      "metadata": {
        "id": "o0_66sToLHtO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Please copy and paste your debug table image here for this query. Otherwise delete this cell."
      ],
      "metadata": {
        "id": "3qXM7pOCLHtP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%bigquery --project $project_id\n",
        "\n",
        "WITH fav_bucket AS (\n",
        "    SELECT\n",
        "    owner_user_id as user_id,\n",
        "    NTILE(10) OVER (ORDER BY favorite_count) as bucket\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions`\n",
        "  WHERE favorite_count IS NOT NULL\n",
        "), user_bucekt AS (\n",
        "  SELECT\n",
        "    display_name as user_name,\n",
        "    id,\n",
        "    NTILE(10) OVER (ORDER BY reputation) as bucket\n",
        "  FROM `bigquery-public-data.stackoverflow.users`\n",
        "  WHERE reputation IS NOT NULL\n",
        ")\n",
        "SELECT user_name\n",
        "FROM user_bucekt as u\n",
        "INNER JOIN fav_bucket as f\n",
        "  ON u.id = f.user_id\n",
        "WHERE u.bucket = 10 AND f.bucket = 10\n",
        "-- SELECT bucket = 10 as it's order by ascending favorite count\n",
        "--- the last bucket contains the ones with the highest favorite count\n",
        "LIMIT 10\n"
      ],
      "metadata": {
        "id": "yJulud418X5O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Window Functions"
      ],
      "metadata": {
        "id": "CKwA3QAjJfFz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "3 queries with OVER, including RANK vs ROW_NUMBER. Please note the FAQs!"
      ],
      "metadata": {
        "id": "s7j7SpYTJiI2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Window Function 1: Users, reputation < 500 and in either USA or England, partition by location , what are their ranks by the grade level of average answer score:\n",
        "- score: < 0.5, grade: D\n",
        "- score: 0.5~ 2, grade: C\n",
        "- score: 2~10, grade: B\n",
        "- score: >10, grade: A"
      ],
      "metadata": {
        "id": "i1a-xFQqLL_E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%bigquery --project $project_id\n",
        "WITH stats_table AS (\n",
        "  SELECT\n",
        "    u.location,\n",
        "    u.display_name,\n",
        "    COUNT(a.id) as total_answers,\n",
        "    AVG(a.score) as avg_answer_score,\n",
        "    COUNT(a.favorite_count) as total_favorites\n",
        "  FROM `bigquery-public-data.stackoverflow.users` u\n",
        "  LEFT JOIN `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "      ON u.id = a.owner_user_id\n",
        "  WHERE u.location IN ('USA', 'UK')\n",
        "  GROUP BY u.location, u.display_name\n",
        "\n",
        "), assign_grades AS (\n",
        "  SELECT *,\n",
        "    CASE\n",
        "      WHEN avg_answer_score < 2 AND avg_answer_score > 0.5 THEN 'C'\n",
        "      WHEN avg_answer_score >= 2 AND avg_answer_score < 10 THEN 'B'\n",
        "      WHEN avg_answer_score >= 10 THEN 'A'\n",
        "      ELSE 'D'\n",
        "    END as answer_grade\n",
        "  FROM stats_table\n",
        ")\n",
        "SELECT *,\n",
        "  RANK() OVER (\n",
        "    PARTITION BY location\n",
        "    ORDER BY answer_grade\n",
        "  ) as RankNum,\n",
        "  ROW_NUMBER() OVER (\n",
        "    PARTITION BY location\n",
        "    ORDER BY answer_grade\n",
        "  ) as RowNum\n",
        "FROM assign_grades\n",
        "QUALIFY RowNum <= 5\n",
        "ORDER BY location"
      ],
      "metadata": {
        "id": "vwicXKGs2haR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Window Function 2: Questions in the year of 2020, partition by location (USA, England), rank by #favorite"
      ],
      "metadata": {
        "id": "ltMhPoal41aj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%bigquery --project $project_id\n",
        "SELECT\n",
        "    u.location,\n",
        "    p.id as QuestionId,\n",
        "    p.title,\n",
        "    p.favorite_count,\n",
        "    u.display_name as Author,\n",
        "    p.creation_date,\n",
        "    RANK() OVER (\n",
        "        PARTITION BY u.location\n",
        "        ORDER BY  p.score DESC, p.favorite_count DESC\n",
        "    ) as FavoriteRank,\n",
        "    ROW_NUMBER() OVER (\n",
        "        PARTITION BY u.location\n",
        "        ORDER BY p.score DESC, p.favorite_count DESC\n",
        "    ) as RowNum\n",
        "FROM `bigquery-public-data.stackoverflow.posts_questions` p\n",
        "INNER JOIN `bigquery-public-data.stackoverflow.users` u\n",
        "    ON p.owner_user_id = u.id\n",
        "WHERE EXTRACT(YEAR FROM p.creation_date) = 2020\n",
        "    AND u.location IS NOT NULL\n",
        "    AND u.location != ''\n",
        "    AND p.favorite_count > 0\n",
        "    AND u.location in ('USA', 'England')\n",
        "QUALIFY FavoriteRank <= 5\n",
        "ORDER BY u.location\n",
        "LIMIT 10"
      ],
      "metadata": {
        "id": "an7y_5ERCiVU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Window Function 3: Users, parition by questions tags (specifically deep-learning and sql), get top 3 who answers the most questions\n"
      ],
      "metadata": {
        "id": "lHUepMe5LPqT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%bigquery --project $project_id\n",
        "WITH question_tags AS (\n",
        "  SELECT\n",
        "    q.id as question_id,\n",
        "    tag\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q,\n",
        "  UNNEST(SPLIT(tags, '|')) as tag\n",
        "  WHERE tag IN ('deep-learning', 'sql')\n",
        "),\n",
        "answer_counts AS (\n",
        "  SELECT\n",
        "    qt.tag,\n",
        "    a.owner_user_id,\n",
        "    u.display_name,\n",
        "    COUNT(a.id) as total_answers\n",
        "  FROM question_tags qt\n",
        "  JOIN `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "    ON qt.question_id = a.parent_id\n",
        "  LEFT JOIN `bigquery-public-data.stackoverflow.users` u\n",
        "    ON a.owner_user_id = u.id\n",
        "  WHERE a.owner_user_id IS NOT NULL\n",
        "  GROUP BY qt.tag, a.owner_user_id, u.display_name\n",
        ")\n",
        "SELECT\n",
        "  tag,\n",
        "  owner_user_id,\n",
        "  display_name,\n",
        "  total_answers,\n",
        "  RANK() OVER (\n",
        "    PARTITION BY tag\n",
        "    ORDER BY total_answers DESC\n",
        "  ) as rank_num,\n",
        "  ROW_NUMBER() OVER (\n",
        "    PARTITION BY tag\n",
        "    ORDER BY total_answers DESC\n",
        "  ) as row_num\n",
        "FROM answer_counts\n",
        "QUALIFY rank_num <= 3\n",
        "ORDER BY tag, rank_num"
      ],
      "metadata": {
        "id": "PTvfXpta5deu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Section 4: Exploring Central Questions"
      ],
      "metadata": {
        "id": "_IeIyuMsLVab"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Main Question - What are the emerging trends of knoweledege and their respective experts?\n",
        "\n",
        "1. What are the top 3 new emerging trends and what trends are abandomed in the lastest year?\n",
        "- query 1.1 get new trend: Identify tags that rank in top 50 by question volume in latest 12 months BUT were NOT in top 100 during years 2-4 ago AND have growth rate exceeding 150% year-over-year AND maintain 50%+ answer rate\n",
        "- query 1.2 get abandoning trend: IDENTIFY tags that ranked in top 50 during years 2-4 ago BUT dropped to rank 100+ in latest 12 months AND question volume decreased 50%+ AND unanswered rate increased 20%\n",
        "\n",
        "2. Who are the domain experts with the associated with the top new emerging trends?\n",
        "- query 2.1: identify users WHO answered 30+ questions in emerging tags (from Q1.1) in the last 12 months AND have 60%+ acceptance rate on those emerging-tag answers AND average 8+ upvotes per answer in emerging tags but reputation < max(reputation) * 0.6\n",
        "\n",
        "- query 2.2: get people who succesfully transitioned from old trending fields to new trending field: Identify users WHO ranked in top 20% by answer score in abandoned tags (from Q1.2) during years 4-6 ago AND now rank in top 20% by answer score in emerging tags (from Q1.1) in last 12 months AND maintain answer acceptance rate >= 50%\n",
        "\n",
        "3. In which areas exist knowledge gap in the latest 3 year?\n",
        "- q3.1 (identify tags where people don't know much about or contain misleading information): Identify tags WHERE question volume grew 100%+ in lastest 3 yr BUT average answerer reputation is below 5,000\n",
        "\n",
        "- q3.2 (identify what do people want to know but don't know): FIND tags WHERE view-to-question ratio in (top 10% of all tags) AND answer rate in (bottom 20%) in latest 3 year\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "Ib7AdxqCLmfU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question 1: What are the top new trending topics and what topics are abandomed in the lastest year?"
      ],
      "metadata": {
        "id": "v1ZFxJrvLX-H"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Query 1.1: Identify Emerging Trends\n",
        "\n",
        "**Objective:** Find emerging tags that show significant recent growth but were previously underrepresented.\n",
        "\n",
        "**Criteria:**\n",
        "1. **Recent Activity (Last 1 Year):**\n",
        "   - High question volume among tags not in the historical top 100\n",
        "   - Quality threshold: Both questions and answers must have score ≥ 1 (indicating validity and non-spurious)\n",
        "   - Answer rate ≥ 50% (indicating active community engagement)\n",
        "   - For each tag, current year question volume > 2× the yearly average from years 1-4\n",
        "\n",
        "2. **Historical Top 100 :**\n",
        "   - time: 1-4 Years Ago\n",
        "   - Quality threshold: Both questions and answers must have score ≥ 1 (indicating validity and non-spurious)\n"
      ],
      "metadata": {
        "id": "ixHoF2-iQHac"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# get latest date first from the database as the database stops updating already\n",
        "%%bigquery --project $project_id\n",
        "SELECT MAX(creation_date) AS latest_date\n",
        "FROM `bigquery-public-data.stackoverflow.posts_questions`\n"
      ],
      "metadata": {
        "id": "iO_0C1g5Ra90"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%bigquery --project $project_id\n",
        "WITH recent_questions AS ( -- get all tags and questions with score >= 1 in latest 12 month\n",
        "  SELECT DISTINCT\n",
        "    tag_name,\n",
        "    q.id AS question_id,\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP('2022-09-25')\n",
        "    AND q.score >= 1\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "recent_quality_answers AS ( -- get all tags, question, and answers with score >= 1\n",
        "  SELECT DISTINCT\n",
        "    q.id AS question_id,\n",
        "    tag_name\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "    ON q.id = a.parent_id\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP('2022-09-25')\n",
        "    AND a.score >= 1\n",
        "    AND q.score >= 1\n",
        "),\n",
        "recent_tags AS ( -- left join recent_questions and recent_quality_answers,\n",
        "--group by tag_name and question_id to make sure no duplicate questions for each tag\n",
        "  SELECT\n",
        "    rq.tag_name,\n",
        "    rq.question_id,\n",
        "    MAX(CASE WHEN rqa.question_id IS NOT NULL THEN 1 ELSE 0 END) AS has_quality_answer\n",
        "  FROM recent_questions rq\n",
        "  LEFT JOIN recent_quality_answers rqa\n",
        "    ON rq.question_id = rqa.question_id\n",
        "    AND rq.tag_name = rqa.tag_name\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "recent_tag_stats AS ( -- calculate some stats for recent tags, and select the ones with >50% answer rate\n",
        "  SELECT\n",
        "    tag_name,\n",
        "    COUNT(question_id) AS total_questions,\n",
        "    SUM(has_quality_answer) AS answered_questions,\n",
        "    SUM(has_quality_answer) / COUNT( question_id) AS answer_rate,\n",
        "    ROW_NUMBER() OVER (ORDER BY COUNT(question_id) DESC) AS rank\n",
        "  FROM recent_tags\n",
        "  GROUP BY tag_name\n",
        "  HAVING answer_rate >= 0.5\n",
        "), -- repeat the above steps for old_questions, old_quality_answers, and old_tags\n",
        "old_questions AS (\n",
        "  SELECT DISTINCT\n",
        "    tag_name,\n",
        "    q.id AS question_id,\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 48 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND q.score >= 1\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "old_quality_answers AS (\n",
        "  SELECT DISTINCT\n",
        "    q.id AS question_id,\n",
        "    tag_name\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "    ON q.id = a.parent_id\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 48 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND a.score >= 1\n",
        "    AND q.score >= 1\n",
        "),\n",
        "old_tags AS (\n",
        "  SELECT\n",
        "    oq.tag_name,\n",
        "    oq.question_id,\n",
        "    MAX(CASE WHEN oqa.question_id IS NOT NULL THEN 1 ELSE 0 END) AS has_quality_answer\n",
        "  FROM old_questions oq\n",
        "  LEFT JOIN old_quality_answers oqa\n",
        "    ON oq.question_id = oqa.question_id\n",
        "    AND oq.tag_name = oqa.tag_name\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "old_stats AS (\n",
        "  SELECT\n",
        "    tag_name,\n",
        "    COUNT(DISTINCT question_id) AS total_questions,\n",
        "    SUM(has_quality_answer) AS answered_questions,\n",
        "    SUM(has_quality_answer) / COUNT(DISTINCT question_id) AS answer_rate,\n",
        "    ROW_NUMBER() OVER (ORDER BY COUNT(DISTINCT question_id) DESC) AS rank\n",
        "  FROM old_tags\n",
        "  GROUP BY tag_name\n",
        ")\n",
        "-- left join recent_tag_stats with old_tag_stats, only keeping \"emerging\" tags\n",
        "SELECT\n",
        "  r.tag_name,\n",
        "  r.total_questions as recent_yr_total_questions,\n",
        "  r.answer_rate AS recent_answer_rate,\n",
        "  FLOOR(o.total_questions / 3) as old_total_questions_per_yr,\n",
        "  o.answer_rate AS old_answer_rate,\n",
        "  r.rank AS new_rank,\n",
        "  o.rank AS old_rank\n",
        "FROM recent_tag_stats AS r\n",
        "LEFT JOIN old_stats AS o\n",
        "  ON r.tag_name = o.tag_name\n",
        "WHERE r.rank <= 100\n",
        "  AND r.tag_name NOT IN (\n",
        "    SELECT tag_name\n",
        "    FROM old_stats\n",
        "    WHERE rank <= 100\n",
        "  )\n",
        "  AND (r.total_questions / (o.total_questions / 3)) >= 2\n",
        "ORDER BY r.total_questions DESC\n",
        "\n"
      ],
      "metadata": {
        "id": "k-Uc-5BtOovp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### query 1.2 get trend: Identify trends that are losing momentum\n",
        "Criteria for popular tags in historial context but loosing traction in recent year:\n",
        "- that ranked in top 200 in question volumne 1-4 yr ago BUT dropped to rank 300+ in latest 12 months\n",
        "- answer rate > 50%\n",
        "- question and answer score >= 1\n",
        "- yearly average question count > 2* recent year question count <br>\n",
        "(criteria selected for reasons same as Q1.1)\n",
        "\n"
      ],
      "metadata": {
        "id": "OqI-ZxUZQIWe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%bigquery --project $project_id\n",
        "WITH recent_questions AS ( -- get all tags and questions with score >= 1 in latest 12 month\n",
        "  SELECT DISTINCT\n",
        "    tag_name,\n",
        "    q.id AS question_id,\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP('2022-09-25')\n",
        "    AND q.score >= 1\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "recent_quality_answers AS ( -- get all tags, question, and answers with score >= 1\n",
        "  SELECT DISTINCT\n",
        "    q.id AS question_id,\n",
        "    tag_name\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "    ON q.id = a.parent_id\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP('2022-09-25')\n",
        "    AND a.score >= 1\n",
        "    AND q.score >= 1\n",
        "),\n",
        "recent_tags AS ( -- left join recent_questions and recent_quality_answers,\n",
        "--group by tag_name and question_id to make sure no duplicate questions for each tag\n",
        "  SELECT\n",
        "    rq.tag_name,\n",
        "    rq.question_id,\n",
        "    MAX(CASE WHEN rqa.question_id IS NOT NULL THEN 1 ELSE 0 END) AS has_quality_answer\n",
        "  FROM recent_questions rq\n",
        "  LEFT JOIN recent_quality_answers rqa\n",
        "    ON rq.question_id = rqa.question_id\n",
        "    AND rq.tag_name = rqa.tag_name\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "recent_tag_stats AS ( -- calculate some stats for recent tags, and select the ones with >50% answer rate\n",
        "  SELECT\n",
        "    tag_name,\n",
        "    COUNT(question_id) AS total_questions,\n",
        "    SUM(has_quality_answer) AS answered_questions,\n",
        "    SUM(has_quality_answer) / COUNT( question_id) AS answer_rate,\n",
        "    ROW_NUMBER() OVER (ORDER BY COUNT(question_id) DESC) AS rank\n",
        "  FROM recent_tags\n",
        "  GROUP BY tag_name\n",
        "  --HAVING answer_rate >= 0.5\n",
        "), -- repeat the above steps for old_questions, old_quality_answers, and old_tags\n",
        "old_questions AS (\n",
        "  SELECT DISTINCT\n",
        "    tag_name,\n",
        "    q.id AS question_id,\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 48 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND q.score >= 1\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "old_quality_answers AS (\n",
        "  SELECT DISTINCT\n",
        "    q.id AS question_id,\n",
        "    tag_name\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "    ON q.id = a.parent_id\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 48 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND a.score >= 1\n",
        "    AND q.score >= 1\n",
        "),\n",
        "old_tags AS (\n",
        "  SELECT\n",
        "    oq.tag_name,\n",
        "    oq.question_id,\n",
        "    MAX(CASE WHEN oqa.question_id IS NOT NULL THEN 1 ELSE 0 END) AS has_quality_answer\n",
        "  FROM old_questions oq\n",
        "  LEFT JOIN old_quality_answers oqa\n",
        "    ON oq.question_id = oqa.question_id\n",
        "    AND oq.tag_name = oqa.tag_name\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "old_stats AS (\n",
        "  SELECT\n",
        "    tag_name,\n",
        "    COUNT(DISTINCT question_id) AS total_questions,\n",
        "    SUM(has_quality_answer) AS answered_questions,\n",
        "    SUM(has_quality_answer) / COUNT(DISTINCT question_id) AS answer_rate,\n",
        "    ROW_NUMBER() OVER (ORDER BY COUNT(DISTINCT question_id) DESC) AS rank\n",
        "  FROM old_tags\n",
        "  GROUP BY tag_name\n",
        "  HAVING answer_rate >= 0.5\n",
        ")\n",
        "-- left join old_tag_stats with recent tags, keeping tags that ranks top 200 previosly but drop out top 300 latest 12 month\n",
        "SELECT\n",
        "  o.tag_name,\n",
        "  FLOOR(o.total_questions / 3) as old_total_questions_per_yr,\n",
        "  r.total_questions as recent_yr_total_questions,\n",
        "  o.rank AS old_rank,\n",
        "  r.rank AS new_rank,\n",
        "  r.answer_rate AS recent_answer_rate,\n",
        "  o.answer_rate AS old_answer_rate,\n",
        "FROM old_stats AS o\n",
        "LEFT JOIN recent_tag_stats AS r\n",
        "  ON o.tag_name = r.tag_name\n",
        "WHERE o.rank <= 200\n",
        "AND o.tag_name NOT IN (\n",
        "  SELECT tag_name\n",
        "  FROM recent_tag_stats\n",
        "  WHERE rank <= 300\n",
        ") AND ((o.total_questions / 3) / r.total_questions) >= 2\n",
        "ORDER BY o.total_questions DESC\n",
        "LIMIT 10\n"
      ],
      "metadata": {
        "id": "mM0iBElHQ3fZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question 2:\n"
      ],
      "metadata": {
        "id": "rL-cjyFqLfek"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Q2.1 Who are the experts in the top 10 emerging trends identified in q 1.1?\n",
        "Criteria for experts:\n",
        "1. with a good reputation (reputation > 500)\n",
        "2. for each emerging tag, during 2021/09/25 ~2022/09/25, answers >= 20 questions and have an average answer score of >=1"
      ],
      "metadata": {
        "id": "0OVuIUdWyXe_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%bigquery --project $project_id\n",
        "------- < the CTEs in this block are from q1.1 > ---------\n",
        "WITH recent_questions AS ( -- get all tags and questions with score >= 1 in latest 12 month\n",
        "  SELECT DISTINCT\n",
        "    tag_name,\n",
        "    q.id AS question_id,\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP('2022-09-25')\n",
        "    AND q.score >= 1\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "recent_quality_answers AS ( -- get all tags, question, and answers with score >= 1\n",
        "  SELECT DISTINCT\n",
        "    q.id AS question_id,\n",
        "    tag_name\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "    ON q.id = a.parent_id\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP('2022-09-25')\n",
        "    AND a.score >= 1\n",
        "    AND q.score >= 1\n",
        "),\n",
        "recent_tags AS ( -- left join recent_questions and recent_quality_answers,\n",
        "--group by tag_name and question_id to make sure no duplicate questions for each tag\n",
        "  SELECT\n",
        "    rq.tag_name,\n",
        "    rq.question_id,\n",
        "    MAX(CASE WHEN rqa.question_id IS NOT NULL THEN 1 ELSE 0 END) AS has_quality_answer\n",
        "  FROM recent_questions rq\n",
        "  LEFT JOIN recent_quality_answers rqa\n",
        "    ON rq.question_id = rqa.question_id\n",
        "    AND rq.tag_name = rqa.tag_name\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "recent_tag_stats AS ( -- calculate some stats for recent tags, and select the ones with >50% answer rate\n",
        "  SELECT\n",
        "    tag_name,\n",
        "    COUNT(question_id) AS total_questions,\n",
        "    SUM(has_quality_answer) AS answered_questions,\n",
        "    SUM(has_quality_answer) / COUNT( question_id) AS answer_rate,\n",
        "    ROW_NUMBER() OVER (ORDER BY COUNT(question_id) DESC) AS rank\n",
        "  FROM recent_tags\n",
        "  GROUP BY tag_name\n",
        "  HAVING answer_rate >= 0.5\n",
        "), -- repeat the above steps for old_questions, old_quality_answers, and old_tags\n",
        "old_questions AS (\n",
        "  SELECT DISTINCT\n",
        "    tag_name,\n",
        "    q.id AS question_id,\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 48 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND q.score >= 1\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "old_quality_answers AS (\n",
        "  SELECT DISTINCT\n",
        "    q.id AS question_id,\n",
        "    tag_name\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "    ON q.id = a.parent_id\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 48 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND a.score >= 1\n",
        "    AND q.score >= 1\n",
        "),\n",
        "old_tags AS (\n",
        "  SELECT\n",
        "    oq.tag_name,\n",
        "    oq.question_id,\n",
        "    MAX(CASE WHEN oqa.question_id IS NOT NULL THEN 1 ELSE 0 END) AS has_quality_answer\n",
        "  FROM old_questions oq\n",
        "  LEFT JOIN old_quality_answers oqa\n",
        "    ON oq.question_id = oqa.question_id\n",
        "    AND oq.tag_name = oqa.tag_name\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "old_stats AS (\n",
        "  SELECT\n",
        "    tag_name,\n",
        "    COUNT(DISTINCT question_id) AS total_questions,\n",
        "    SUM(has_quality_answer) AS answered_questions,\n",
        "    SUM(has_quality_answer) / COUNT(DISTINCT question_id) AS answer_rate,\n",
        "    ROW_NUMBER() OVER (ORDER BY COUNT(DISTINCT question_id) DESC) AS rank\n",
        "  FROM old_tags\n",
        "  GROUP BY tag_name\n",
        ")\n",
        "-- left join recent_tag_stats with old_tag_stats, only keeping \"emerging\" tags\n",
        ",TOP_emerging_tags AS (\n",
        "SELECT\n",
        "  r.tag_name,\n",
        "  r.total_questions as recent_yr_total_questions,\n",
        "  r.answer_rate AS recent_answer_rate,\n",
        "  FLOOR(o.total_questions / 3) as old_total_questions_per_yr,\n",
        "  o.answer_rate AS old_answer_rate,\n",
        "  r.rank AS new_rank,\n",
        "  o.rank AS old_rank\n",
        "FROM recent_tag_stats AS r\n",
        "LEFT JOIN old_stats AS o\n",
        "  ON r.tag_name = o.tag_name\n",
        "WHERE r.rank <= 100\n",
        "  AND r.tag_name NOT IN (\n",
        "    SELECT tag_name\n",
        "    FROM old_stats\n",
        "    WHERE rank <= 100\n",
        "  )\n",
        "  AND (r.total_questions / (o.total_questions / 3)) >= 2\n",
        "ORDER BY r.total_questions DESC\n",
        "), ------- < the CTEs in this block are from q1.1 > ---------\n",
        "# get q&A records from the latest 12 month, and join them with emerging_tags and the user table\n",
        "# only selecting user with a reputation of >= 500, indicating regular contribution with consistent quality\n",
        "get_emerging_tags_user AS (\n",
        "  SELECT\n",
        "    a.owner_user_id,\n",
        "    a.id AS answer_id,\n",
        "    a.score AS answer_score,\n",
        "    a.creation_date,\n",
        "    q.id AS question_id,\n",
        "    tag_name,\n",
        "    u.display_name,\n",
        "    u.reputation\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "  INNER JOIN `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "    ON a.parent_id = q.id\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  INNER JOIN TOP_emerging_tags top_tags\n",
        "    ON tag_name = top_tags.tag_name\n",
        "  INNER JOIN `bigquery-public-data.stackoverflow.users` u\n",
        "    ON  a.owner_user_id = u.id\n",
        "  WHERE a.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND a.creation_date < TIMESTAMP('2022-09-25')\n",
        "    AND a.owner_user_id IS NOT NULL\n",
        "    AND u.reputation >= 500\n",
        "),\n",
        "# for each tag and each user, filter down the one in which each user answer > 20 questions and\n",
        "# has an average answer score >= 1\n",
        "get_user_stats AS (\n",
        "  SELECT\n",
        "    owner_user_id,\n",
        "    display_name,\n",
        "    tag_name,\n",
        "    COUNT(DISTINCT gta.answer_id) AS total_answers,\n",
        "    ROUND(AVG(gta.answer_score), 2) AS avg_answer_score\n",
        "    FROM get_emerging_tags_user gta\n",
        "    GROUP BY owner_user_id, display_name, tag_name\n",
        "    HAVING total_answers >= 20 AND avg_answer_score >= 1\n",
        "), ranked_users AS (\n",
        "  SELECT\n",
        "    *,\n",
        "    RANK() OVER (PARTITION BY tag_name ORDER BY avg_answer_score DESC) AS score_rank,\n",
        "    RANK() OVER (PARTITION BY tag_name ORDER BY total_answers DESC) AS answer_rank\n",
        "  FROM get_user_stats\n",
        ")\n",
        "SELECT\n",
        "tag_name,\n",
        "display_name,\n",
        "total_answers,\n",
        "avg_answer_score,\n",
        "score_rank,\n",
        "answer_rank\n",
        "FROM ranked_users\n",
        "WHERE score_rank = 1 OR answer_rank = 1\n",
        "ORDER BY tag_name\n",
        "\n"
      ],
      "metadata": {
        "id": "M8jX12Ibm9yu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "####Q 2.2 What are the top 3 tags these experts associated with (by number of answers and by answer scores)?"
      ],
      "metadata": {
        "id": "beEPwDqItTg-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%bigquery --project $project_id\n",
        "------- < the CTEs in this block are from q1.1 > ---------\n",
        "WITH recent_questions AS ( -- get all tags and questions with score >= 1 in latest 12 month\n",
        "  SELECT DISTINCT\n",
        "    tag_name,\n",
        "    q.id AS question_id,\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP('2022-09-25')\n",
        "    AND q.score >= 1\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "recent_quality_answers AS ( -- get all tags, question, and answers with score >= 1\n",
        "  SELECT DISTINCT\n",
        "    q.id AS question_id,\n",
        "    tag_name\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "    ON q.id = a.parent_id\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP('2022-09-25')\n",
        "    AND a.score >= 1\n",
        "    AND q.score >= 1\n",
        "),\n",
        "recent_tags AS ( -- left join recent_questions and recent_quality_answers,\n",
        "--group by tag_name and question_id to make sure no duplicate questions for each tag\n",
        "  SELECT\n",
        "    rq.tag_name,\n",
        "    rq.question_id,\n",
        "    MAX(CASE WHEN rqa.question_id IS NOT NULL THEN 1 ELSE 0 END) AS has_quality_answer\n",
        "  FROM recent_questions rq\n",
        "  LEFT JOIN recent_quality_answers rqa\n",
        "    ON rq.question_id = rqa.question_id\n",
        "    AND rq.tag_name = rqa.tag_name\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "recent_tag_stats AS ( -- calculate some stats for recent tags, and select the ones with >50% answer rate\n",
        "  SELECT\n",
        "    tag_name,\n",
        "    COUNT(question_id) AS total_questions,\n",
        "    SUM(has_quality_answer) AS answered_questions,\n",
        "    SUM(has_quality_answer) / COUNT( question_id) AS answer_rate,\n",
        "    ROW_NUMBER() OVER (ORDER BY COUNT(question_id) DESC) AS rank\n",
        "  FROM recent_tags\n",
        "  GROUP BY tag_name\n",
        "  HAVING answer_rate >= 0.5\n",
        "), -- repeat the above steps for old_questions, old_quality_answers, and old_tags\n",
        "old_questions AS (\n",
        "  SELECT DISTINCT\n",
        "    tag_name,\n",
        "    q.id AS question_id,\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 48 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND q.score >= 1\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "old_quality_answers AS (\n",
        "  SELECT DISTINCT\n",
        "    q.id AS question_id,\n",
        "    tag_name\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "    ON q.id = a.parent_id\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 48 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND a.score >= 1\n",
        "    AND q.score >= 1\n",
        "),\n",
        "old_tags AS (\n",
        "  SELECT\n",
        "    oq.tag_name,\n",
        "    oq.question_id,\n",
        "    MAX(CASE WHEN oqa.question_id IS NOT NULL THEN 1 ELSE 0 END) AS has_quality_answer\n",
        "  FROM old_questions oq\n",
        "  LEFT JOIN old_quality_answers oqa\n",
        "    ON oq.question_id = oqa.question_id\n",
        "    AND oq.tag_name = oqa.tag_name\n",
        "  GROUP BY tag_name, question_id\n",
        "),\n",
        "old_stats AS (\n",
        "  SELECT\n",
        "    tag_name,\n",
        "    COUNT(DISTINCT question_id) AS total_questions,\n",
        "    SUM(has_quality_answer) AS answered_questions,\n",
        "    SUM(has_quality_answer) / COUNT(DISTINCT question_id) AS answer_rate,\n",
        "    ROW_NUMBER() OVER (ORDER BY COUNT(DISTINCT question_id) DESC) AS rank\n",
        "  FROM old_tags\n",
        "  GROUP BY tag_name\n",
        ")\n",
        "-- left join recent_tag_stats with old_tag_stats, only keeping \"emerging\" tags\n",
        ",TOP_emerging_tags AS (\n",
        "SELECT\n",
        "  r.tag_name,\n",
        "  r.total_questions as recent_yr_total_questions,\n",
        "  r.answer_rate AS recent_answer_rate,\n",
        "  FLOOR(o.total_questions / 3) as old_total_questions_per_yr,\n",
        "  o.answer_rate AS old_answer_rate,\n",
        "  r.rank AS new_rank,\n",
        "  o.rank AS old_rank\n",
        "FROM recent_tag_stats AS r\n",
        "LEFT JOIN old_stats AS o\n",
        "  ON r.tag_name = o.tag_name\n",
        "WHERE r.rank <= 100\n",
        "  AND r.tag_name NOT IN (\n",
        "    SELECT tag_name\n",
        "    FROM old_stats\n",
        "    WHERE rank <= 100\n",
        "  )\n",
        "  AND (r.total_questions / (o.total_questions / 3)) >= 2\n",
        "ORDER BY r.total_questions DESC\n",
        "), ------- < the CTEs in this block are from q1.1 > ---------,\n",
        "# get q&A records from the latest 12 month, and join them with emerging_tags and the user table\n",
        "# only selecting user with a reputation of >= 500, indicating regular contribution with consistent quality\n",
        "get_emerging_tags_user AS (\n",
        "  SELECT\n",
        "    a.owner_user_id,\n",
        "    a.id AS answer_id,\n",
        "    a.score AS answer_score,\n",
        "    a.creation_date,\n",
        "    q.id AS question_id,\n",
        "    tag_name,\n",
        "    u.display_name,\n",
        "    u.reputation\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "  INNER JOIN `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "    ON a.parent_id = q.id\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  INNER JOIN TOP_emerging_tags top_tags\n",
        "    ON tag_name = top_tags.tag_name\n",
        "  INNER JOIN `bigquery-public-data.stackoverflow.users` u\n",
        "    ON  a.owner_user_id = u.id\n",
        "  WHERE a.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND a.creation_date < TIMESTAMP('2022-09-25')\n",
        "    AND a.owner_user_id IS NOT NULL\n",
        "    AND u.reputation >= 500\n",
        "), get_user_stats AS (\n",
        "  SELECT\n",
        "    owner_user_id,\n",
        "    display_name,\n",
        "    tag_name,\n",
        "    COUNT(DISTINCT gta.answer_id) AS total_answers,\n",
        "    ROUND(AVG(gta.answer_score), 2) AS avg_answer_score\n",
        "    FROM get_emerging_tags_user gta\n",
        "    GROUP BY owner_user_id, display_name, tag_name\n",
        "    HAVING total_answers >= 20 AND avg_answer_score >= 1\n",
        "), ranked_users AS (\n",
        "  SELECT\n",
        "    *,\n",
        "    RANK() OVER (PARTITION BY tag_name ORDER BY avg_answer_score DESC) AS score_rank,\n",
        "    RANK() OVER (PARTITION BY tag_name ORDER BY total_answers DESC) AS answer_rank\n",
        "  FROM get_user_stats\n",
        "), # the top experts identified in Q2.1\n",
        "top_experts AS (\n",
        "  SELECT DISTINCT\n",
        "    owner_user_id,\n",
        "    display_name\n",
        "  FROM ranked_users\n",
        "  WHERE score_rank = 1 OR answer_rank = 1\n",
        "),\n",
        "user_all_time_tags AS (\n",
        "  SELECT\n",
        "    a.owner_user_id,\n",
        "    te.display_name,\n",
        "    tag_name,\n",
        "    COUNT(DISTINCT a.id) AS lifetime_answers_per_tag,\n",
        "    ROUND(AVG(a.score), 2) AS lifetime_avg_score_per_tag\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "  INNER JOIN `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "    ON a.parent_id = q.id\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  INNER JOIN top_experts te\n",
        "    ON a.owner_user_id = te.owner_user_id\n",
        "  WHERE a.owner_user_id IS NOT NULL\n",
        "  GROUP BY a.owner_user_id, te.display_name, tag_name\n",
        "),\n",
        "ranked_lifetime_tags AS (\n",
        "  SELECT\n",
        "    *,\n",
        "    ROW_NUMBER() OVER (\n",
        "      PARTITION BY owner_user_id\n",
        "      ORDER BY lifetime_answers_per_tag DESC, lifetime_avg_score_per_tag DESC\n",
        "    ) AS tag_rank,\n",
        "  CASE\n",
        "   WHEN tag_name in (\n",
        "    SELECT tag_name\n",
        "    FROM TOP_emerging_tags\n",
        "   ) THEN TRUE\n",
        "   ELSE FALSE\n",
        "   END AS is_emerging_tag\n",
        "  FROM user_all_time_tags\n",
        ")\n",
        "\n",
        "SELECT\n",
        "display_name,\n",
        "tag_name,\n",
        "is_emerging_tag,\n",
        "lifetime_answers_per_tag,\n",
        "lifetime_avg_score_per_tag,\n",
        "tag_rank\n",
        "FROM ranked_lifetime_tags\n",
        "WHERE tag_rank <= 3\n",
        "ORDER BY owner_user_id, tag_rank"
      ],
      "metadata": {
        "id": "8qI7ckdrtTB1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question 3: What are the knowledge gap in the latest 12 months?\n",
        "Knowledge gap is defined as:\n",
        " (1) high views, low answer rate\n",
        " (2) high question count, low answer rate\n",
        " (3) high question count, high answer rate, low answer score and low acceptance rate\n",
        " (4) low question count,  high view count, and low answer rate"
      ],
      "metadata": {
        "id": "5fGm-Uo4LfzH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%bigquery --project $project_id\n",
        "WITH recent_tags AS ( -- get all tags in the latest 12 month, make sure each tag is associated distinct questions\n",
        "  SELECT\n",
        "    tag_name,\n",
        "    q.id AS question_id,\n",
        "    MAX(q.creation_date) as creation_date,\n",
        "    MAX(q.answer_count) as answer_count,\n",
        "    MAX(q.view_count) AS question_view_count,\n",
        "    CASE WHEN MAX(q.answer_count) > 0 THEN 1 ELSE 0 END AS is_answered,\n",
        "    CASE WHEN MAX(q.accepted_answer_id) IS NOT NULL THEN 1 ELSE 0 END AS has_accepted_answer\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP('2022-09-25')\n",
        "  GROUP BY tag_name, question_id\n",
        "), -- join with answers table, group by question id to get average answer score for each question\n",
        "answer_stats AS (\n",
        "  SELECT\n",
        "    q.id AS question_id,\n",
        "    AVG(a.score) AS avg_answer_score\n",
        "  FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "  INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` a\n",
        "    ON q.id = a.parent_id\n",
        "  WHERE q.creation_date >= TIMESTAMP(DATE_SUB(DATE('2022-09-25'), INTERVAL 12 MONTH))\n",
        "    AND q.creation_date < TIMESTAMP('2022-09-25')\n",
        "  GROUP BY q.id\n",
        "), -- once group by tag name, each question is distinct (verified)\n",
        "tag_stats AS (\n",
        "  SELECT\n",
        "    rt.tag_name,\n",
        "    COUNT(rt.question_id) AS total_questions,\n",
        "    --COUNT(DISTINCT rt.question_id) AS total_questions_2, -- verified total_questions_2 == total_questions\n",
        "    SUM(rt.is_answered) AS answered_questions,\n",
        "    SUM(rt.has_accepted_answer) AS accepted_answer_count,\n",
        "    SUM(rt.is_answered) / COUNT(rt.question_id) AS answer_rate,\n",
        "    SUM(rt.has_accepted_answer) / COUNT(rt.question_id) AS acceptance_rate,\n",
        "    ROW_NUMBER() OVER (ORDER BY COUNT(rt.question_id) DESC) AS rank_by_question,\n",
        "    ROW_NUMBER() OVER (ORDER BY AVG(rt.question_view_count) DESC) AS rank_by_view,\n",
        "    AVG(rt.question_view_count) AS avg_question_views,\n",
        "    CASE\n",
        "    WHEN AVG(ans.avg_answer_score) IS NOT NULL THEN AVG(ans.avg_answer_score)\n",
        "    ELSE 0\n",
        "    END AS avg_answer_score\n",
        "  FROM recent_tags rt\n",
        "  LEFT JOIN answer_stats ans\n",
        "    ON rt.question_id = ans.question_id\n",
        "  GROUP BY rt.tag_name\n",
        ") -- gather knowledge gaps:\n",
        "-- (1) high views, low answer rate -\n",
        ",type_1 AS (\n",
        "  SELECT *\n",
        "  FROM tag_stats\n",
        "  WHERE rank_by_view < 200\n",
        "    AND answer_rate < 0.5\n",
        "   ORDER BY rank_by_view LIMIT 10\n",
        "), -- (2) high question count, low answer rate\n",
        "type_2 AS (\n",
        "  SELECT *\n",
        "    FROM tag_stats\n",
        "  WHERE rank_by_question < 200\n",
        "    AND answer_rate < 0.5\n",
        "  ORDER BY rank_by_question LIMIT 10\n",
        "), -- (3) high question count, high answer rate, low answer score and low acceptance rate\n",
        "type_3 AS (\n",
        "  SELECT *\n",
        "  FROM tag_stats\n",
        "  WHERE rank_by_question < 100\n",
        "    AND answer_rate < 0.5\n",
        "    AND avg_answer_score < 1\n",
        "    AND acceptance_rate < 0.5\n",
        "  ORDER BY rank_by_question LIMIT 10 )\n",
        "-- (4) low question count,  high view count, and low answer rate\n",
        "  , type_4 AS (\n",
        "    SELECT *\n",
        "  FROM tag_stats\n",
        "  WHERE total_questions < 100\n",
        "    AND avg_question_views > 2000\n",
        "    AND answer_rate < 0.5\n",
        "    ORDER BY avg_question_views DESC\n",
        "    LIMIT 10\n",
        "  )\n",
        "\n",
        "SELECT\n",
        "tag_name,\n",
        "total_questions,\n",
        "answered_questions,\n",
        "answer_rate,\n",
        "avg_question_views,\n",
        "avg_answer_score,\n",
        "acceptance_rate\n",
        "FROM type_4\n",
        "\n",
        "UNION DISTINCT\n",
        "\n",
        "SELECT\n",
        "tag_name,\n",
        "total_questions,\n",
        "answered_questions,\n",
        "answer_rate,\n",
        "avg_question_views,\n",
        "avg_answer_score,\n",
        "acceptance_rate\n",
        "FROM type_3\n",
        "\n",
        "UNION DISTINCT\n",
        "\n",
        "SELECT\n",
        "tag_name,\n",
        "total_questions,\n",
        "answered_questions,\n",
        "answer_rate,\n",
        "avg_question_views,\n",
        "avg_answer_score,\n",
        "acceptance_rate\n",
        "FROM type_2\n",
        "\n",
        "UNION DISTINCT\n",
        "\n",
        "SELECT\n",
        "tag_name,\n",
        "total_questions,\n",
        "answered_questions,\n",
        "answer_rate,\n",
        "avg_question_views,\n",
        "avg_answer_score,\n",
        "acceptance_rate\n",
        "FROM type_1\n",
        "\n",
        "ORDER BY total_questions DESC\n",
        "LIMIT 10\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "J922fLmLkR4U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Dg7Lhqi_yDcy"
      },
      "source": [
        "# Section 5: Takeaways"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YmVpTigjyHMY"
      },
      "source": [
        "---\n",
        "\n",
        "*TODO: Final conclusions based on the rest of your project*\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Summary of what I learned\n",
        "1. Technologies gaining traction (Jetpack Compose, Vue 3, Tailwind CSS, Snowflake, .NET 6.0) prioritize declarative simplicity and reduced boilerplate, while declining technologies (Bootstrap 4, Python 2.7, Java 8, tsql) represent older paradigms requiring more manual configuration. This suggests the industry is shifting from \"flexibility through complexity\" toward \"power through simplicity\" as a core value proposition.\n",
        "2. The correspondence between massive knowledge gaps in WordPress/WooCommerce and the simultaneous rise of modern UI development tools (Jetpack Compose, Vue 3, Tailwind CSS) reveals a clear supply-demand relationship—everyone, from experienced developers to non-technical users, is attempting to bring their projects to the web and build user interfaces. The market is responding to this universal demand by creating tools that simplify the UI building process.\n",
        "3. The fact that most experts in emerging technologies (2021-2022) possess strong UI development knowledge (React.js, JavaScript, HTML, CSS alongside backend skills like SQL) suggests that UI/frontend expertise has become one of the critical bottleneck and differentiating skill in modern software development.\n",
        "4. The strong growth in Snowflake adoption and persistent knowledge gaps in OpenCV/deep-learning during 2021-2022 align closely with current industry trends toward cloud-native data platforms and AI/ML democratization. This suggests the methodology used in this project has successfully identified genuine technology shifts.\n",
        "\n",
        "#### Limitations\n",
        "1. The analysis examines only one \"recent year\" (2021-2022) compared to one \"historical period\" (2018-2021), making it impossible to distinguish between temporary spikes and sustained trends. To validate this approach, multiple historical periods should be tested (e.g., comparing 2019-2020 vs. 2016-2019, then 2020-2021 vs. 2017-2020) to verify whether the methodology consistently identifies trends before they become mainstream.\n",
        "2. Relying exclusively on Stack Overflow data introduces significant sampling bias—technologies with excellent documentation, strong Discord/Slack communities, or enterprise support channels may appear underrepresented, while the dataset cannot capture external factors like geopolitical events, regulatory changes, economic conditions, or major disruptions like COVID-19 that heavily influence technology adoption patterns.\n",
        "\n",
        "\n",
        "#### How you used AI to brainstorm interesting questions and explore initial approaches?\n",
        "\n",
        "I came up with my central question to identify technology trends. I used AI to help me refine my queries regarding certain thresholds - what threshold values should I use to filter out good reputations, good/bad answer scores and question scores. After I know these certain threshold, I then use them come up with my 3 central questions and their corresponding sql queries.\n",
        "\n",
        "#### How you used AI as training wheels for intermediate queries\n",
        "\n",
        "I use AI to teach me SQL functions that weren't covered in class—primarily `CROSS JOIN UNNEST(SPLIT())` and `NTILE()`. Before incorporating these functions into my project, I learn, test, and verify their functionality using small subsets of BigQuery data. Below is an example demonstrating how I learned to use `CROSS JOIN UNNEST(SPLIT())` <br>\n",
        "\n",
        "```%%bigquery --project $project_id\n",
        "-- first visualize the tables\n",
        "SELECT\n",
        "q.tags,\n",
        "q.id AS question_id,\n",
        "FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "WHERE q.id IN (13807708, 13800475, 13813890)\n",
        "```\n",
        "```\n",
        "%%bigquery --project $project_id\n",
        "-- verify the functionalities of CROSS JOIN UNNEST()\n",
        "SELECT\n",
        "q.tags,\n",
        "q.id AS question_id,\n",
        "tag_name\n",
        "FROM `bigquery-public-data.stackoverflow.posts_questions` q\n",
        "CROSS JOIN UNNEST(SPLIT(q.tags, '|')) AS tag_name\n",
        "WHERE q.id IN (13807708, 13800475, 13813890)\n",
        "```\n",
        "#### How you verified SQL correctness with debug tables (on paper) to prep for no-AI interviews/tests?\n",
        "\n",
        "I used a lot of CTEs in my queries, with each CTE handling a single transformation step. This approach allows me to easily sketch debug tables on paper for each intermediate result using small data subsets.\n"
      ],
      "metadata": {
        "id": "8aDiKXUJ-ein"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "t2QHCN0xJlXJ",
        "pKtqsVuYKdt6",
        "37FNty6MLEv4",
        "o0_66sToLHtO",
        "i1a-xFQqLL_E",
        "rL-cjyFqLfek",
        "5fGm-Uo4LfzH"
      ],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
